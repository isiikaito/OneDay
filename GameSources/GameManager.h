/*!
@file GameStageManager.h
@brief ゲームステージ
*/

#pragma once
#include "stdafx.h"
#include "GameManagerState.h"
namespace basecross {

	namespace kaito
	{
		//!前方宣言
		template<class entity_type>
		class State;
		//!前方宣言
		template <class entity_type>
		class StateMachine;
	}

	//--------------------------------------------------------------------------------------
	//	ゲームステージクラス
	//--------------------------------------------------------------------------------------
	class GameManager{
	private:

		kaito::StateMachine<GameManager>* m_StateMachine;//!プレイヤーのステートマシン

	
		//!シングルトン
		//--------------------------------------------------------------------------------------
		/*!
		@brief　コンストラクタ
		*/
		//--------------------------------------------------------------------------------------
		GameManager()
		{
			m_StateMachine = new kaito::StateMachine<GameManager>(this);
			//m_StateMachine->SetCurrentState(kaito::GamePayState::Instance());
		}
	

		//--------------------------------------------------------------------------------------
		/*!
		@brief　シングルトン
		*/
		//--------------------------------------------------------------------------------------
		GameManager(const GameManager&) = delete;//!関数を削除する
		GameManager& operator = (const GameManager&) = delete;//!operatorのなかにある=を削除(コピーされないように)

	public:

		//--------------------------------------------------------------------------------------
		/*!
		@brief　インスタンスの取得
		*/
		//--------------------------------------------------------------------------------------
		static GameManager* Instance();

		//--------------------------------------------------------------------------------------
		/*!
		@brief　更新
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnUpdate();

		

		//--------------------------------------------------------------------------------------
		/*!
		@brief	ステートマシンのアクセッサ
		//!ステートマシン
		*/
		//--------------------------------------------------------------------------------------

		const kaito::StateMachine<GameManager>* GetFSM()const
		{
			return m_StateMachine;
		}

		//--------------------------------------------------------------------------------------
		/*!
		@brief	ステートの変更
		@引数　クラスに対応したステート
		*/
		//--------------------------------------------------------------------------------------
		virtual void ChangeState(kaito::State<GameManager>* NewState);

		//--------------------------------------------------------------------------------------
		/*!
		@brief	ステートの変更
		@引数　クラスに対応したステート
		*/
		//--------------------------------------------------------------------------------------
		void GetStage();

		//--------------------------------------------------------------------------------------
		/*!
		@brief	ステージ時間の取得
		@retrun 時間を返す
		*/
		//--------------------------------------------------------------------------------------
		static float GetElpasedTiem();

		static float GetDayTiem();
	};
}
//end basecross


